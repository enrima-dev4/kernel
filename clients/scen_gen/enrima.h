// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* enrima.h
   Generated by wsdl2h 2.8.3 from http://www.ime.iiasa.ac.at/enrima_ws_tst1/enrima.wsdl and typemap.dat
   2013-02-14 09:01:12 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2001-2010 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on enrima.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS.
   USE THE SOURCE CODE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT BUILDS:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
1) GPL or 2) Genivia's license for commercial use.
--------------------------------------------------------------------------------
1) GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
2) A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://www.ime.iiasa.ac.at/enrima                                        *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://www.ime.iiasa.ac.at/enrima"
ns2 = "http://www.ime.iiasa.ac.at/model/spec"
ns3 = "http://www.ime.iiasa.ac.at/model/instance"
ns4 = "http://www.ime.iiasa.ac.at/model/analysis"

*/

#define SOAP_NAMESPACE_OF_ns2	"http://www.ime.iiasa.ac.at/model/spec"
//gsoap ns2   schema namespace:	http://www.ime.iiasa.ac.at/model/spec
//gsoap ns2   schema form:	unqualified

#define SOAP_NAMESPACE_OF_ns3	"http://www.ime.iiasa.ac.at/model/instance"
//gsoap ns3   schema namespace:	http://www.ime.iiasa.ac.at/model/instance
//gsoap ns3   schema form:	unqualified

#define SOAP_NAMESPACE_OF_ns4	"http://www.ime.iiasa.ac.at/model/analysis"
//gsoap ns4   schema namespace:	http://www.ime.iiasa.ac.at/model/analysis
//gsoap ns4   schema form:	unqualified

#define SOAP_NAMESPACE_OF_ns1	"http://www.ime.iiasa.ac.at/enrima"
//gsoap ns1   schema namespace:	http://www.ime.iiasa.ac.at/enrima
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class ns2__modelSpec.
class ns2__modelSpec;

//  Forward declaration of class ns2__setSpec.
class ns2__setSpec;

//  Forward declaration of class ns2__entitySpec.
class ns2__entitySpec;

//  Forward declaration of class ns2__iteratorContainer.
class ns2__iteratorContainer;

//  Forward declaration of class ns3__modelData.
class ns3__modelData;

//  Forward declaration of class ns3__modelInstance.
class ns3__modelInstance;

//  Forward declaration of class ns3__memberDic.
class ns3__memberDic;

//  Forward declaration of class ns3__tupleValue.
class ns3__tupleValue;

//  Forward declaration of class ns3__setMembers.
class ns3__setMembers;

//  Forward declaration of class ns3__tupleMembers.
class ns3__tupleMembers;

//  Forward declaration of class ns3__entityValues.
class ns3__entityValues;

//  Forward declaration of class ns3__tupleValues.
class ns3__tupleValues;

//  Forward declaration of class ns3__batchValues.
class ns3__batchValues;

//  Forward declaration of class ns3__value.
class ns3__value;

//  Forward declaration of class _ns3__dataSet.
class _ns3__dataSet;

//  Forward declaration of class ns4__analysis.
class ns4__analysis;

//  Forward declaration of class ns4__preference.
class ns4__preference;

//  Forward declaration of class _ns1__getSMSRequest.
class _ns1__getSMSRequest;

//  Forward declaration of class _ns1__getSMSResponse.
class _ns1__getSMSResponse;

//  Forward declaration of class _ns1__getEntityValuesRequest.
class _ns1__getEntityValuesRequest;

//  Forward declaration of class _ns1__getEntityValuesResponse.
class _ns1__getEntityValuesResponse;

//  Forward declaration of class _ns1__getBatchValuesRequest.
class _ns1__getBatchValuesRequest;

//  Forward declaration of class _ns1__getBatchValuesResponse.
class _ns1__getBatchValuesResponse;

//  Forward declaration of class _ns1__getSetMembersRequest.
class _ns1__getSetMembersRequest;

//  Forward declaration of class _ns1__getSetMembersResponse.
class _ns1__getSetMembersResponse;

//  Forward declaration of class _ns1__storeMainSetRequest.
class _ns1__storeMainSetRequest;

//  Forward declaration of class _ns1__storeMainSetResponse.
class _ns1__storeMainSetResponse;

//  Forward declaration of class _ns1__storeSetMembersRequest.
class _ns1__storeSetMembersRequest;

//  Forward declaration of class _ns1__storeSetMembersResponse.
class _ns1__storeSetMembersResponse;

//  Forward declaration of class _ns1__removeSetMembersRequest.
class _ns1__removeSetMembersRequest;

//  Forward declaration of class _ns1__removeSetMembersResponse.
class _ns1__removeSetMembersResponse;

//  Forward declaration of class _ns1__storeEntityValuesRequest.
class _ns1__storeEntityValuesRequest;

//  Forward declaration of class _ns1__storeEntityValuesResponse.
class _ns1__storeEntityValuesResponse;

//  Forward declaration of class _ns1__removeEntityValuesRequest.
class _ns1__removeEntityValuesRequest;

//  Forward declaration of class _ns1__removeEntityValuesResponse.
class _ns1__removeEntityValuesResponse;

//  Forward declaration of class _ns1__defineModelDataRequest.
class _ns1__defineModelDataRequest;

//  Forward declaration of class _ns1__defineModelDataResponse.
class _ns1__defineModelDataResponse;

//  Forward declaration of class _ns1__changeModelDataStatusRequest.
class _ns1__changeModelDataStatusRequest;

//  Forward declaration of class _ns1__changeModelDataStatusResponse.
class _ns1__changeModelDataStatusResponse;

//  Forward declaration of class _ns1__defineInstanceRequest.
class _ns1__defineInstanceRequest;

//  Forward declaration of class _ns1__defineInstanceResponse.
class _ns1__defineInstanceResponse;

//  Forward declaration of class _ns1__getDataSummaryRequest.
class _ns1__getDataSummaryRequest;

//  Forward declaration of class _ns1__getDataSummaryResponse.
class _ns1__getDataSummaryResponse;

//  Forward declaration of class _ns1__defineAnalysisRequest.
class _ns1__defineAnalysisRequest;

//  Forward declaration of class _ns1__defineAnalysisResponse.
class _ns1__defineAnalysisResponse;

//  Forward declaration of class _ns1__getAnalysesRequest.
class _ns1__getAnalysesRequest;

//  Forward declaration of class _ns1__getAnalysesResponse.
class _ns1__getAnalysesResponse;

//  Forward declaration of class _ns1__definePreferenceRequest.
class _ns1__definePreferenceRequest;

//  Forward declaration of class _ns1__definePreferenceResponse.
class _ns1__definePreferenceResponse;

//  Forward declaration of class _ns1__getPreferenceRequest.
class _ns1__getPreferenceRequest;

//  Forward declaration of class _ns1__getPreferenceResponse.
class _ns1__getPreferenceResponse;

//  Forward declaration of class _ns1__storeSolutionRequest.
class _ns1__storeSolutionRequest;

//  Forward declaration of class _ns1__storeSolutionResponse.
class _ns1__storeSolutionResponse;

//  Forward declaration of class _ns1__getSolutionRequest.
class _ns1__getSolutionRequest;

//  Forward declaration of class _ns1__getSolutionResponse.
class _ns1__getSolutionResponse;

//  Forward declaration of class _ns1__updateSolverStatusRequest.
class _ns1__updateSolverStatusRequest;

//  Forward declaration of class _ns1__updateSolverStatusResponse.
class _ns1__updateSolverStatusResponse;

//  Forward declaration of class _ns1__getSolverStatusRequest.
class _ns1__getSolverStatusRequest;

//  Forward declaration of class _ns1__getSolverStatusResponse.
class _ns1__getSolverStatusResponse;

//  Forward declaration of class _ns1__runSolverRequest.
class _ns1__runSolverRequest;

//  Forward declaration of class _ns1__runSolverResponse.
class _ns1__runSolverResponse;

//  Forward declaration of class _ns1__runScenarioRequest.
class _ns1__runScenarioRequest;

//  Forward declaration of class _ns1__runScenarioResponse.
class _ns1__runScenarioResponse;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.ime.iiasa.ac.at/model/spec                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.ime.iiasa.ac.at/model/instance                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.ime.iiasa.ac.at/model/analysis                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.ime.iiasa.ac.at/enrima                                        *
 *                                                                            *
\******************************************************************************/


/// "http://www.ime.iiasa.ac.at/model/spec":status is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns2__status' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns2__status
{
	ns2__status__EDIT,	///< xs:string value="EDIT"
	ns2__status__TEST,	///< xs:string value="TEST"
	ns2__status__COMMITED,	///< xs:string value="COMMITED"
};

/// "http://www.ime.iiasa.ac.at/model/spec":setSpecType is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns2__setSpecType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns2__setSpecType
{
	ns2__setSpecType__MAINSET,	///< xs:string value="MAINSET"
	ns2__setSpecType__SUBSET,	///< xs:string value="SUBSET"
	ns2__setSpecType__INDEXEDSUBSET,	///< xs:string value="INDEXEDSUBSET"
};

/// "http://www.ime.iiasa.ac.at/model/spec":entityRole is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns2__entityRole' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns2__entityRole
{
	ns2__entityRole__CONSTANT,	///< xs:string value="CONSTANT"
	ns2__entityRole__PARAMETER,	///< xs:string value="PARAMETER"
	ns2__entityRole__DECISION_USCOREVAR,	///< xs:string value="DECISION_VAR"
	ns2__entityRole__EXTERNAL_USCOREDECISION_USCOREVAR,	///< xs:string value="EXTERNAL_DECISION_VAR"
	ns2__entityRole__OUTCOME_USCOREVAR,	///< xs:string value="OUTCOME_VAR"
	ns2__entityRole__AUXILIARY_USCOREVAR,	///< xs:string value="AUXILIARY_VAR"
	ns2__entityRole__ASSIGNMENT,	///< xs:string value="ASSIGNMENT"
	ns2__entityRole__CONSTRAINT,	///< xs:string value="CONSTRAINT"
/// @brief any type of variable: DECISION_VAR, EXTERNAL_DECISION_VAR,OUTCOME_VAR,or AUXILIARY_VAR
	ns2__entityRole__A_USCOREVARIABLE,	///< xs:string value="A_VARIABLE"
/// @brief any type of formula: ASSIGNMENT or CONSTRAINT
	ns2__entityRole__A_USCOREFORMULA,	///< xs:string value="A_FORMULA"
};

/// "http://www.ime.iiasa.ac.at/model/spec":mathType is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns2__mathType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns2__mathType
{
	ns2__mathType__INTEGER,	///< xs:string value="INTEGER"
	ns2__mathType__REAL,	///< xs:string value="REAL"
};

/// "http://www.ime.iiasa.ac.at/model/spec":shortName is a simpleType restriction of xs:string.
/// Length of this string is within 1..16 characters
typedef std::string ns2__shortName 1:16;

/// "http://www.ime.iiasa.ac.at/model/spec":name is a simpleType restriction of xs:string.
/// Length of this string is within 1..64 characters
typedef std::string ns2__name 1:64;

/// "http://www.ime.iiasa.ac.at/model/spec":description is a simpleType restriction of xs:string.
/// Length of this string is within 1..1000 characters
typedef std::string ns2__description 1:1000;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.ime.iiasa.ac.at/model/instance                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.ime.iiasa.ac.at/model/analysis                                *
 *                                                                            *
\******************************************************************************/


/// "http://www.ime.iiasa.ac.at/model/analysis":preferenceType is a simpleType restriction of xs:string.
/// @brief need to be discussed within the developers group
/// Note: enum values are prefixed with 'ns4__preferenceType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns4__preferenceType
{
	ns4__preferenceType__MIN,	///< xs:string value="MIN"
	ns4__preferenceType__MAX,	///< xs:string value="MAX"
	ns4__preferenceType__LOWER_USCOREBND,	///< xs:string value="LOWER_BND"
	ns4__preferenceType__UPPER_USCOREBND,	///< xs:string value="UPPER_BND"
};

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.ime.iiasa.ac.at/enrima                                        *
 *                                                                            *
\******************************************************************************/


/// "http://www.ime.iiasa.ac.at/enrima":responseStatus is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns1__responseStatus' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns1__responseStatus
{
	ns1__responseStatus__OK,	///< xs:string value="OK"
	ns1__responseStatus__INVALID_USCORESETNAME,	///< xs:string value="INVALID_SETNAME"
	ns1__responseStatus__INVALID_USCOREDATAUPDATE,	///< xs:string value="INVALID_DATAUPDATE"
	ns1__responseStatus__INVALID_USCOREITERATOR,	///< xs:string value="INVALID_ITERATOR"
	ns1__responseStatus__INVALID_USCORESET_USCOREMEMBER,	///< xs:string value="INVALID_SET_MEMBER"
	ns1__responseStatus__INVALID_USCOREVALUE,	///< xs:string value="INVALID_VALUE"
	ns1__responseStatus__INVALID_USCOREENTITYNAME,	///< xs:string value="INVALID_ENTITYNAME"
	ns1__responseStatus__BOUND_USCOREVIOLATION,	///< xs:string value="BOUND_VIOLATION"
	ns1__responseStatus__UNKOWN_USCOREEXECEPTION,	///< xs:string value="UNKOWN_EXECEPTION"
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.ime.iiasa.ac.at/model/spec                                    *
 *                                                                            *
\******************************************************************************/


/// "http://www.ime.iiasa.ac.at/model/spec":modelSpec is a complexType.
class ns2__modelSpec
{ public:
/// Element id of type xs:int.
    int*                                 id                             0;	///< Optional element.
/// Element shortName of type "http://www.ime.iiasa.ac.at/model/spec":shortName.
    ns2__shortName                       shortName                      1;	///< Required element.
/// Element name of type "http://www.ime.iiasa.ac.at/model/spec":name.
    ns2__name*                           name                           0;	///< Optional element.
/// Element description of type "http://www.ime.iiasa.ac.at/model/spec":description.
    ns2__description*                    description                    0;	///< Optional element.
/// Element status of type "http://www.ime.iiasa.ac.at/model/spec":status.
    enum ns2__status                     status                         1;	///< Required element.
/// Vector of ns2__setSpec* with length 1..unbounded
    std::vector<ns2__setSpec*          > setSpec                        1;
/// Vector of ns2__entitySpec* with length 1..unbounded
    std::vector<ns2__entitySpec*       > entitySpec                     1;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.ime.iiasa.ac.at/model/spec":setSpec is a complexType.
class ns2__setSpec
{ public:
/// Element id of type xs:int.
    int*                                 id                             0;	///< Optional element.
/// @brief only for sub set
/// Element idParent of type xs:int.
    int*                                 idParent                       0;	///< Optional element.
/// Element shortName of type "http://www.ime.iiasa.ac.at/model/spec":shortName.
    ns2__shortName                       shortName                      1;	///< Required element.
/// Element name of type "http://www.ime.iiasa.ac.at/model/spec":name.
    ns2__name*                           name                           0;	///< Optional element.
/// Element description of type "http://www.ime.iiasa.ac.at/model/spec":description.
    ns2__description*                    description                    0;	///< Optional element.
/// Element type of type "http://www.ime.iiasa.ac.at/model/spec":setSpecType.
    enum ns2__setSpecType                type                           1;	///< Required element.
/// @brief default index name (for main set only)
/// Element idx of type xs:string.
    std::string*                         idx                            0;	///< Optional element.
/// @brief for index set only
/// Element iteratorContainer of type "http://www.ime.iiasa.ac.at/model/spec":iteratorContainer.
    ns2__iteratorContainer*              iteratorContainer              0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.ime.iiasa.ac.at/model/spec":entitySpec is a complexType.
class ns2__entitySpec
{ public:
/// Element id of type xs:int.
    int*                                 id                             0;	///< Optional element.
/// Element shortName of type "http://www.ime.iiasa.ac.at/model/spec":shortName.
    ns2__shortName                       shortName                      1;	///< Required element.
/// Element name of type "http://www.ime.iiasa.ac.at/model/spec":name.
    ns2__name*                           name                           0;	///< Optional element.
/// Element description of type "http://www.ime.iiasa.ac.at/model/spec":description.
    ns2__description*                    description                    0;	///< Optional element.
/// Element idLowerBound of type xs:int.
    int*                                 idLowerBound                   0;	///< Optional element.
/// Element idUpperBound of type xs:int.
    int*                                 idUpperBound                   0;	///< Optional element.
/// @brief optional, only for constant type of entity
/// Element constantValue of type xs:double.
    double*                              constantValue                  0;	///< Optional element.
/// Element iteratorContainer of type "http://www.ime.iiasa.ac.at/model/spec":iteratorContainer.
    ns2__iteratorContainer*              iteratorContainer              0;	///< Optional element.
/// Element role of type "http://www.ime.iiasa.ac.at/model/spec":entityRole.
    enum ns2__entityRole*                role                           0;	///< Optional element.
/// Element mathType of type "http://www.ime.iiasa.ac.at/model/spec":mathType.
    enum ns2__mathType                   mathType                       1;	///< Required element.
/// Element unit of type xs:string.
    std::string*                         unit                           0;	///< Optional element.
/// Element formula of type xs:string.
    std::string*                         formula                        0;	///< Optional element.
/// @brief specification of the data source (optional, but very useful for organizing data management processes
/// Element source of type xs:string.
    std::string*                         source                         0;	///< Optional element.
/// @brief for grouping parameters (optional, but very useful for management of the data access rights).
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > group                          0;
/// @brief which modelSpec it belongs
/// Element modelSpec of type xs:string.
    std::string*                         modelSpec                      0;	///< Optional element.
/// @brief define subset of entity which has same index/indices structure
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > batch                          0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.ime.iiasa.ac.at/model/spec":iteratorContainer is a complexType.
class ns2__iteratorContainer
{ public:
/// Vector of int with length 1..unbounded
    std::vector<int                    > idSetSpec                      1;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.ime.iiasa.ac.at/model/instance                                *
 *                                                                            *
\******************************************************************************/


/// "http://www.ime.iiasa.ac.at/model/instance":modelData is a complexType.
class ns3__modelData
{ public:
/// Element id of type xs:int.
    int*                                 id                             0;	///< Optional element.
/// Vector of int with length 1..unbounded
    std::vector<int                    > idModelSpec                    1;
/// Element idParent of type xs:int.
    int*                                 idParent                       0;	///< Optional element.
/// Element description of type "http://www.ime.iiasa.ac.at/model/spec":description.
    ns2__description*                    description                    0;	///< Optional element.
/// Element status of type "http://www.ime.iiasa.ac.at/model/spec":status.
    enum ns2__status                     status                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.ime.iiasa.ac.at/model/instance":modelInstance is a complexType.
class ns3__modelInstance
{ public:
/// Element id of type xs:int.
    int*                                 id                             0;	///< Optional element.
/// Element idModelSpec of type xs:int.
    int                                  idModelSpec                    1;	///< Required element.
/// Element idModelData of type xs:int.
    int                                  idModelData                    1;	///< Required element.
/// Element shortName of type "http://www.ime.iiasa.ac.at/model/spec":shortName.
    ns2__shortName*                      shortName                      0;	///< Optional element.
/// Element name of type "http://www.ime.iiasa.ac.at/model/spec":name.
    ns2__name*                           name                           0;	///< Optional element.
/// Element description of type "http://www.ime.iiasa.ac.at/model/spec":description.
    ns2__description*                    description                    0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.ime.iiasa.ac.at/model/instance":memberDic is a complexType.
class ns3__memberDic
{ public:
/// Element id of type xs:int.
    int*                                 id                             0;	///< Optional element.
/// Element code of type "http://www.ime.iiasa.ac.at/model/spec":name.
    ns2__name                            code                           1;	///< Required element.
/// Element description of type "http://www.ime.iiasa.ac.at/model/spec":description.
    ns2__description*                    description                    0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.ime.iiasa.ac.at/model/instance":tupleValue is a complexType.
class ns3__tupleValue
{ public:
/// Vector of ns3__memberDic* with length 0..unbounded
    std::vector<ns3__memberDic*        > tupleMember                    0;
/// Element value of type "http://www.ime.iiasa.ac.at/model/instance":value.
    ns3__value*                          value                          1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.ime.iiasa.ac.at/model/instance":setMembers is a complexType.
class ns3__setMembers
{ public:
/// Element setShortName of type xs:string.
    std::string                          setShortName                   1;	///< Required element.
/// Vector of ns3__tupleMembers* with length 0..unbounded
    std::vector<ns3__tupleMembers*     > tupleMembers                   0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.ime.iiasa.ac.at/model/instance":tupleMembers is a complexType.
class ns3__tupleMembers
{ public:
/// @brief only for indexed set, tuple members are seperated by , for example: AT,2007
/// Element tuple of type xs:string.
    std::string*                         tuple                          0;	///< Optional element.
/// @brief set members are seperated by , for example: AT,AU,PL
/// Element members of type xs:string.
    std::string                          members                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.ime.iiasa.ac.at/model/instance":entityValues is a complexType.
class ns3__entityValues
{ public:
/// Element entityShortName of type xs:string.
    std::string                          entityShortName                1;	///< Required element.
/// Vector of ns3__tupleValues* with length 0..unbounded
    std::vector<ns3__tupleValues*      > tupleValues                    0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.ime.iiasa.ac.at/model/instance":tupleValues is a complexType.
class ns3__tupleValues
{ public:
/// @brief tuple members are seperated by , for example: AT,2007
/// Element tuple of type xs:string.
    std::string*                         tuple                          0;	///< Optional element.
/// Element value of type "http://www.ime.iiasa.ac.at/model/instance":value.
    ns3__value*                          value                          1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.ime.iiasa.ac.at/model/instance":batchValues is a complexType.
class ns3__batchValues
{ public:
/// Vector of ns3__memberDic* with length 0..unbounded
    std::vector<ns3__memberDic*        > tupleMember                    0;
/// Vector of ns3__value* with length 0..unbounded
    std::vector<ns3__value*            > value                          0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.ime.iiasa.ac.at/model/instance":value is a complexType.
class ns3__value
{ public:
/// CHOICE OF ELEMENTS <xs:choice>
   $int                                  __union_value                 ;	///< Union _ns3__union_value selector: set to SOAP_UNION__ns3__union_value_<fieldname>
/// Union for choice in type ns3__value
    union _ns3__union_value
    {
/// Element intValue of type xs:int.
    int                                  intValue                       1;	///< Required element.
/// Element doubleValue of type xs:double.
    double                               doubleValue                    1;	///< Required element.
    }                                    union_value                   ;
//  END OF CHOICE
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/model/instance":dataSet
/// @brief only for mockup

/// "http://www.ime.iiasa.ac.at/model/instance":dataSet is a complexType.
class _ns3__dataSet
{ public:
/// Vector of ns3__setMembers* with length 1..unbounded
    std::vector<ns3__setMembers*       > setMembers                     1;
/// Vector of ns3__entityValues* with length 1..unbounded
    std::vector<ns3__entityValues*     > entityValues                   1;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.ime.iiasa.ac.at/model/analysis                                *
 *                                                                            *
\******************************************************************************/


/// "http://www.ime.iiasa.ac.at/model/analysis":analysis is a complexType.
class ns4__analysis
{ public:
/// Element id of type xs:int.
    int*                                 id                             0;	///< Optional element.
/// Element idModelInstance of type xs:int.
    int                                  idModelInstance                1;	///< Required element.
/// Element shortName of type "http://www.ime.iiasa.ac.at/model/spec":shortName.
    ns2__shortName                       shortName                      1;	///< Required element.
/// Element name of type "http://www.ime.iiasa.ac.at/model/spec":name.
    ns2__name*                           name                           0;	///< Optional element.
/// Element description of type "http://www.ime.iiasa.ac.at/model/spec":description.
    ns2__description*                    description                    0;	///< Optional element.
/// Element status of type xs:string.
    std::string                          status                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.ime.iiasa.ac.at/model/analysis":preference is a complexType.
/// @brief need to be discussed within the developers group
class ns4__preference
{ public:
/// Element idEntitySpec of type xs:int.
    int                                  idEntitySpec                   1;	///< Required element.
/// Element preferenceType of type "http://www.ime.iiasa.ac.at/model/analysis":preferenceType.
    enum ns4__preferenceType             preferenceType                 1;	///< Required element.
/// Element prefValue of type xs:double.
    double*                              prefValue                      0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.ime.iiasa.ac.at/enrima                                        *
 *                                                                            *
\******************************************************************************/



/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":getSMSRequest

/// "http://www.ime.iiasa.ac.at/enrima":getSMSRequest is a complexType.
class _ns1__getSMSRequest
{ public:
/// Element idModelSpec of type xs:int.
    int                                  idModelSpec                    1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":getSMSResponse

/// "http://www.ime.iiasa.ac.at/enrima":getSMSResponse is a complexType.
class _ns1__getSMSResponse
{ public:
/// Element modelSpec of type "http://www.ime.iiasa.ac.at/model/spec":modelSpec.
    ns2__modelSpec*                      modelSpec                      1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":getEntityValuesRequest

/// "http://www.ime.iiasa.ac.at/enrima":getEntityValuesRequest is a complexType.
class _ns1__getEntityValuesRequest
{ public:
/// Element idModelSpec of type xs:int.
    int                                  idModelSpec                    1;	///< Required element.
/// Element idModelData of type xs:int.
    int                                  idModelData                    1;	///< Required element.
/// Element entityShortName of type xs:string.
    std::string                          entityShortName                1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":getEntityValuesResponse

/// "http://www.ime.iiasa.ac.at/enrima":getEntityValuesResponse is a complexType.
class _ns1__getEntityValuesResponse
{ public:
/// Element entitySpec of type "http://www.ime.iiasa.ac.at/model/spec":entitySpec.
    ns2__entitySpec*                     entitySpec                     1;	///< Required element.
/// Vector of ns3__tupleValue* with length 0..unbounded
    std::vector<ns3__tupleValue*       > tupleValue                     0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":getBatchValuesRequest

/// "http://www.ime.iiasa.ac.at/enrima":getBatchValuesRequest is a complexType.
class _ns1__getBatchValuesRequest
{ public:
/// Element idModelSpec of type xs:int.
    int                                  idModelSpec                    1;	///< Required element.
/// Element idModelData of type xs:int.
    int                                  idModelData                    1;	///< Required element.
/// Element batch of type xs:string.
    std::string                          batch                          1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":getBatchValuesResponse

/// "http://www.ime.iiasa.ac.at/enrima":getBatchValuesResponse is a complexType.
class _ns1__getBatchValuesResponse
{ public:
/// Element idModelData of type xs:int.
    int                                  idModelData                    1;	///< Required element.
/// Vector of ns2__entitySpec* with length 0..unbounded
    std::vector<ns2__entitySpec*       > entitySpec                     0;
/// Vector of ns3__batchValues* with length 0..unbounded
    std::vector<ns3__batchValues*      > batchValues                    0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":getSetMembersRequest

/// "http://www.ime.iiasa.ac.at/enrima":getSetMembersRequest is a complexType.
class _ns1__getSetMembersRequest
{ public:
/// Element idModelData of type xs:int.
    int                                  idModelData                    1;	///< Required element.
/// Element setShortName of type xs:string.
    std::string                          setShortName                   1;	///< Required element.
/// Vector of ns3__memberDic* with length 0..unbounded
    std::vector<ns3__memberDic*        > tupleMember                    0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":getSetMembersResponse

/// "http://www.ime.iiasa.ac.at/enrima":getSetMembersResponse is a complexType.
class _ns1__getSetMembersResponse
{ public:
/// Vector of ns3__memberDic* with length 1..unbounded
    std::vector<ns3__memberDic*        > member                         1;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":storeMainSetRequest

/// "http://www.ime.iiasa.ac.at/enrima":storeMainSetRequest is a complexType.
class _ns1__storeMainSetRequest
{ public:
/// Element idModeldata of type xs:int.
    int                                  idModeldata                    1;	///< Required element.
/// Element setShortName of type xs:string.
    std::string                          setShortName                   1;	///< Required element.
/// Vector of ns3__memberDic* with length 1..unbounded
    std::vector<ns3__memberDic*        > member                         1;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":storeMainSetResponse

/// "http://www.ime.iiasa.ac.at/enrima":storeMainSetResponse is a complexType.
class _ns1__storeMainSetResponse
{ public:
/// Element status of type "http://www.ime.iiasa.ac.at/enrima":responseStatus.
    enum ns1__responseStatus             status                         1;	///< Required element.
/// Element msg of type xs:string.
    std::string*                         msg                            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":storeSetMembersRequest

/// "http://www.ime.iiasa.ac.at/enrima":storeSetMembersRequest is a complexType.
class _ns1__storeSetMembersRequest
{ public:
/// Element idModeldata of type xs:int.
    int                                  idModeldata                    1;	///< Required element.
/// Vector of ns3__setMembers* with length 1..unbounded
    std::vector<ns3__setMembers*       > setMembers                     1;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":storeSetMembersResponse

/// "http://www.ime.iiasa.ac.at/enrima":storeSetMembersResponse is a complexType.
class _ns1__storeSetMembersResponse
{ public:
/// Element status of type "http://www.ime.iiasa.ac.at/enrima":responseStatus.
    enum ns1__responseStatus             status                         1;	///< Required element.
/// Element msg of type xs:string.
    std::string*                         msg                            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":removeSetMembersRequest

/// "http://www.ime.iiasa.ac.at/enrima":removeSetMembersRequest is a complexType.
class _ns1__removeSetMembersRequest
{ public:
/// Element idModeldata of type xs:int.
    int                                  idModeldata                    1;	///< Required element.
/// Vector of ns3__setMembers* with length 1..unbounded
    std::vector<ns3__setMembers*       > setMembers                     1;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":removeSetMembersResponse

/// "http://www.ime.iiasa.ac.at/enrima":removeSetMembersResponse is a complexType.
class _ns1__removeSetMembersResponse
{ public:
/// Element status of type "http://www.ime.iiasa.ac.at/enrima":responseStatus.
    enum ns1__responseStatus             status                         1;	///< Required element.
/// Element msg of type xs:string.
    std::string*                         msg                            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":storeEntityValuesRequest

/// "http://www.ime.iiasa.ac.at/enrima":storeEntityValuesRequest is a complexType.
class _ns1__storeEntityValuesRequest
{ public:
/// Element idModelSpec of type xs:int.
    int                                  idModelSpec                    1;	///< Required element.
/// Element idModeldata of type xs:int.
    int                                  idModeldata                    1;	///< Required element.
/// Vector of ns3__entityValues* with length 0..unbounded
    std::vector<ns3__entityValues*     > entityValues                   0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":storeEntityValuesResponse

/// "http://www.ime.iiasa.ac.at/enrima":storeEntityValuesResponse is a complexType.
class _ns1__storeEntityValuesResponse
{ public:
/// Element status of type "http://www.ime.iiasa.ac.at/enrima":responseStatus.
    enum ns1__responseStatus             status                         1;	///< Required element.
/// Element msg of type xs:string.
    std::string*                         msg                            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":removeEntityValuesRequest

/// "http://www.ime.iiasa.ac.at/enrima":removeEntityValuesRequest is a complexType.
class _ns1__removeEntityValuesRequest
{ public:
/// Element idModelSpec of type xs:int.
    int                                  idModelSpec                    1;	///< Required element.
/// Element idModeldata of type xs:int.
    int                                  idModeldata                    1;	///< Required element.
/// Vector of ns3__entityValues* with length 0..unbounded
    std::vector<ns3__entityValues*     > entityValues                   0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":removeEntityValuesResponse

/// "http://www.ime.iiasa.ac.at/enrima":removeEntityValuesResponse is a complexType.
class _ns1__removeEntityValuesResponse
{ public:
/// Element status of type "http://www.ime.iiasa.ac.at/enrima":responseStatus.
    enum ns1__responseStatus             status                         1;	///< Required element.
/// Element msg of type xs:string.
    std::string*                         msg                            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":defineModelDataRequest

/// "http://www.ime.iiasa.ac.at/enrima":defineModelDataRequest is a complexType.
class _ns1__defineModelDataRequest
{ public:
/// Element modelData of type "http://www.ime.iiasa.ac.at/model/instance":modelData.
    ns3__modelData*                      modelData                      1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":defineModelDataResponse

/// "http://www.ime.iiasa.ac.at/enrima":defineModelDataResponse is a complexType.
class _ns1__defineModelDataResponse
{ public:
/// Element modelData of type "http://www.ime.iiasa.ac.at/model/instance":modelData.
    ns3__modelData*                      modelData                      1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":changeModelDataStatusRequest

/// "http://www.ime.iiasa.ac.at/enrima":changeModelDataStatusRequest is a complexType.
class _ns1__changeModelDataStatusRequest
{ public:
/// Element idModelData of type xs:int.
    int                                  idModelData                    1;	///< Required element.
/// Element status of type "http://www.ime.iiasa.ac.at/model/spec":status.
    enum ns2__status                     status                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":changeModelDataStatusResponse

/// "http://www.ime.iiasa.ac.at/enrima":changeModelDataStatusResponse is a complexType.
class _ns1__changeModelDataStatusResponse
{ public:
/// Element result of type xs:string.
    std::string                          result                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":defineInstanceRequest

/// "http://www.ime.iiasa.ac.at/enrima":defineInstanceRequest is a complexType.
class _ns1__defineInstanceRequest
{ public:
/// Element modelInstance of type "http://www.ime.iiasa.ac.at/model/instance":modelInstance.
    ns3__modelInstance*                  modelInstance                  1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":defineInstanceResponse

/// "http://www.ime.iiasa.ac.at/enrima":defineInstanceResponse is a complexType.
class _ns1__defineInstanceResponse
{ public:
/// Element modelInstance of type "http://www.ime.iiasa.ac.at/model/instance":modelInstance.
    ns3__modelInstance*                  modelInstance                  1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":getDataSummaryRequest

/// "http://www.ime.iiasa.ac.at/enrima":getDataSummaryRequest is a complexType.
class _ns1__getDataSummaryRequest
{ public:
/// Element idModelData of type xs:int.
    int                                  idModelData                    1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":getDataSummaryResponse
/// @brief not complete yet, need to be discussed with the developers group

/// "http://www.ime.iiasa.ac.at/enrima":getDataSummaryResponse is a complexType.
class _ns1__getDataSummaryResponse
{ public:
/// Element modelData of type "http://www.ime.iiasa.ac.at/model/instance":modelData.
    ns3__modelData*                      modelData                      1;	///< Required element.
/// Vector of ns3__modelInstance* with length 0..unbounded
    std::vector<ns3__modelInstance*    > modelInstance                  0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":defineAnalysisRequest

/// "http://www.ime.iiasa.ac.at/enrima":defineAnalysisRequest is a complexType.
class _ns1__defineAnalysisRequest
{ public:
/// Element analysis of type "http://www.ime.iiasa.ac.at/model/analysis":analysis.
    ns4__analysis*                       analysis                       1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":defineAnalysisResponse

/// "http://www.ime.iiasa.ac.at/enrima":defineAnalysisResponse is a complexType.
class _ns1__defineAnalysisResponse
{ public:
/// Element analysis of type "http://www.ime.iiasa.ac.at/model/analysis":analysis.
    ns4__analysis*                       analysis                       1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":getAnalysesRequest

/// "http://www.ime.iiasa.ac.at/enrima":getAnalysesRequest is a complexType.
class _ns1__getAnalysesRequest
{ public:
/// Element idModelInstance of type xs:int.
    int                                  idModelInstance                1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":getAnalysesResponse

/// "http://www.ime.iiasa.ac.at/enrima":getAnalysesResponse is a complexType.
class _ns1__getAnalysesResponse
{ public:
/// Vector of ns4__analysis* with length 0..unbounded
    std::vector<ns4__analysis*         > analysis                       0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":definePreferenceRequest

/// "http://www.ime.iiasa.ac.at/enrima":definePreferenceRequest is a complexType.
class _ns1__definePreferenceRequest
{ public:
/// Element idAnalysis of type xs:int.
    int                                  idAnalysis                     1;	///< Required element.
/// Vector of ns4__preference* with length 0..unbounded
    std::vector<ns4__preference*       > preference                     0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":definePreferenceResponse

/// "http://www.ime.iiasa.ac.at/enrima":definePreferenceResponse is a complexType.
class _ns1__definePreferenceResponse
{ public:
/// Element result of type xs:string.
    std::string                          result                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":getPreferenceRequest

/// "http://www.ime.iiasa.ac.at/enrima":getPreferenceRequest is a complexType.
class _ns1__getPreferenceRequest
{ public:
/// Element idAnalysis of type xs:int.
    int                                  idAnalysis                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":getPreferenceResponse

/// "http://www.ime.iiasa.ac.at/enrima":getPreferenceResponse is a complexType.
class _ns1__getPreferenceResponse
{ public:
/// Element idModelSpec of type xs:int.
    int                                  idModelSpec                    1;	///< Required element.
/// Element idModelData of type xs:int.
    int                                  idModelData                    1;	///< Required element.
/// Element idAnalysis of type xs:int.
    int                                  idAnalysis                     1;	///< Required element.
/// Vector of ns4__preference* with length 0..unbounded
    std::vector<ns4__preference*       > preference                     0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":storeSolutionRequest

/// "http://www.ime.iiasa.ac.at/enrima":storeSolutionRequest is a complexType.
class _ns1__storeSolutionRequest
{ public:
/// Element idAnalysis of type xs:int.
    int                                  idAnalysis                     1;	///< Required element.
/// Vector of ns3__entityValues* with length 0..unbounded
    std::vector<ns3__entityValues*     > entityValues                   0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":storeSolutionResponse

/// "http://www.ime.iiasa.ac.at/enrima":storeSolutionResponse is a complexType.
class _ns1__storeSolutionResponse
{ public:
/// Element result of type xs:string.
    std::string                          result                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":getSolutionRequest

/// "http://www.ime.iiasa.ac.at/enrima":getSolutionRequest is a complexType.
class _ns1__getSolutionRequest
{ public:
/// Element idAnalysis of type xs:int.
    int                                  idAnalysis                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":getSolutionResponse

/// "http://www.ime.iiasa.ac.at/enrima":getSolutionResponse is a complexType.
class _ns1__getSolutionResponse
{ public:
/// Element idAnalysis of type xs:int.
    int                                  idAnalysis                     1;	///< Required element.
/// Vector of ns3__entityValues* with length 0..unbounded
    std::vector<ns3__entityValues*     > entityValues                   0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":updateSolverStatusRequest

/// "http://www.ime.iiasa.ac.at/enrima":updateSolverStatusRequest is a complexType.
class _ns1__updateSolverStatusRequest
{ public:
/// Element idAnalysis of type xs:int.
    int                                  idAnalysis                     1;	///< Required element.
/// Element status of type xs:string.
    std::string                          status                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":updateSolverStatusResponse

/// "http://www.ime.iiasa.ac.at/enrima":updateSolverStatusResponse is a complexType.
class _ns1__updateSolverStatusResponse
{ public:
/// Element result of type xs:string.
    std::string                          result                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":getSolverStatusRequest

/// "http://www.ime.iiasa.ac.at/enrima":getSolverStatusRequest is a complexType.
class _ns1__getSolverStatusRequest
{ public:
/// Element idAnalysis of type xs:int.
    int                                  idAnalysis                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":getSolverStatusResponse

/// "http://www.ime.iiasa.ac.at/enrima":getSolverStatusResponse is a complexType.
class _ns1__getSolverStatusResponse
{ public:
/// Element result of type xs:string.
    std::string                          result                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":runSolverRequest

/// "http://www.ime.iiasa.ac.at/enrima":runSolverRequest is a complexType.
class _ns1__runSolverRequest
{ public:
/// Element idAnalysis of type xs:int.
    int                                  idAnalysis                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":runSolverResponse

/// "http://www.ime.iiasa.ac.at/enrima":runSolverResponse is a complexType.
class _ns1__runSolverResponse
{ public:
/// Element result of type xs:string.
    std::string                          result                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":runScenarioRequest

/// "http://www.ime.iiasa.ac.at/enrima":runScenarioRequest is a complexType.
class _ns1__runScenarioRequest
{ public:
/// Element idAnalysis of type xs:int.
    int                                  idAnalysis                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://www.ime.iiasa.ac.at/enrima":runScenarioResponse

/// "http://www.ime.iiasa.ac.at/enrima":runScenarioResponse is a complexType.
class _ns1__runScenarioResponse
{ public:
/// Element result of type xs:string.
    std::string                          result                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.ime.iiasa.ac.at/model/spec                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.ime.iiasa.ac.at/model/spec                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.ime.iiasa.ac.at/model/instance                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.ime.iiasa.ac.at/model/instance                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.ime.iiasa.ac.at/model/analysis                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.ime.iiasa.ac.at/model/analysis                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.ime.iiasa.ac.at/enrima                                        *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.ime.iiasa.ac.at/enrima                                        *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	enrimaSoap11 
//gsoap ns1  service type:	enrima 
//gsoap ns1  service port:	http://www.ime.iiasa.ac.at:80/enrima_ws_tst1/soap/ 
//gsoap ns1  service namespace:	http://www.ime.iiasa.ac.at/enrima 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref enrimaSoap11

@section Service_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page enrimaSoap11 Binding "enrimaSoap11"

@section enrimaSoap11_operations Operations of Binding  "enrimaSoap11"

  - @ref __ns1__changeModelDataStatus

  - @ref __ns1__updateSolverStatus

  - @ref __ns1__getAnalyses

  - @ref __ns1__defineModelData

  - @ref __ns1__runScenario

  - @ref __ns1__defineAnalysis

  - @ref __ns1__getPreference

  - @ref __ns1__getEntityValues

  - @ref __ns1__storeMainSet

  - @ref __ns1__getSMS

  - @ref __ns1__getSolution

  - @ref __ns1__getBatchValues

  - @ref __ns1__removeEntityValues

  - @ref __ns1__getDataSummary

  - @ref __ns1__storeSolution

  - @ref __ns1__getSetMembers

  - @ref __ns1__definePreference

  - @ref __ns1__storeSetMembers

  - @ref __ns1__runSolver

  - @ref __ns1__defineInstance

  - @ref __ns1__removeSetMembers

  - @ref __ns1__storeEntityValues

  - @ref __ns1__getSolverStatus

@section enrimaSoap11_ports Endpoints of Binding  "enrimaSoap11"

  - http://www.ime.iiasa.ac.at:80/enrima_ws_tst1/soap/

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   enrimaSoap11                                                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__changeModelDataStatus                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__changeModelDataStatus" of service binding "enrimaSoap11"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__changeModelDataStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__changeModelDataStatusRequest* ns1__changeModelDataStatusRequest,
    // response parameters:
    _ns1__changeModelDataStatusResponse* ns1__changeModelDataStatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__changeModelDataStatus(
    struct soap *soap,
    // request parameters:
    _ns1__changeModelDataStatusRequest* ns1__changeModelDataStatusRequest,
    // response parameters:
    _ns1__changeModelDataStatusResponse* ns1__changeModelDataStatusResponse
  );
@endcode

C++ proxy class (defined in soapenrimaSoap11Proxy.h):
@code
  class enrimaSoap11Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapenrimaSoap11Service.h):
@code
  class enrimaSoap11Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	changeModelDataStatus document
//gsoap ns1  service method-encoding:	changeModelDataStatus literal
//gsoap ns1  service method-action:	changeModelDataStatus ""
int __ns1__changeModelDataStatus(
    _ns1__changeModelDataStatusRequest* ns1__changeModelDataStatusRequest,	///< Request parameter
    _ns1__changeModelDataStatusResponse* ns1__changeModelDataStatusResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__updateSolverStatus                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__updateSolverStatus" of service binding "enrimaSoap11"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__updateSolverStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__updateSolverStatusRequest*    ns1__updateSolverStatusRequest,
    // response parameters:
    _ns1__updateSolverStatusResponse*   ns1__updateSolverStatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__updateSolverStatus(
    struct soap *soap,
    // request parameters:
    _ns1__updateSolverStatusRequest*    ns1__updateSolverStatusRequest,
    // response parameters:
    _ns1__updateSolverStatusResponse*   ns1__updateSolverStatusResponse
  );
@endcode

C++ proxy class (defined in soapenrimaSoap11Proxy.h):
@code
  class enrimaSoap11Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapenrimaSoap11Service.h):
@code
  class enrimaSoap11Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	updateSolverStatus document
//gsoap ns1  service method-encoding:	updateSolverStatus literal
//gsoap ns1  service method-action:	updateSolverStatus ""
int __ns1__updateSolverStatus(
    _ns1__updateSolverStatusRequest*    ns1__updateSolverStatusRequest,	///< Request parameter
    _ns1__updateSolverStatusResponse*   ns1__updateSolverStatusResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getAnalyses                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getAnalyses" of service binding "enrimaSoap11"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getAnalyses(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__getAnalysesRequest*           ns1__getAnalysesRequest,
    // response parameters:
    _ns1__getAnalysesResponse*          ns1__getAnalysesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getAnalyses(
    struct soap *soap,
    // request parameters:
    _ns1__getAnalysesRequest*           ns1__getAnalysesRequest,
    // response parameters:
    _ns1__getAnalysesResponse*          ns1__getAnalysesResponse
  );
@endcode

C++ proxy class (defined in soapenrimaSoap11Proxy.h):
@code
  class enrimaSoap11Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapenrimaSoap11Service.h):
@code
  class enrimaSoap11Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getAnalyses document
//gsoap ns1  service method-encoding:	getAnalyses literal
//gsoap ns1  service method-action:	getAnalyses ""
int __ns1__getAnalyses(
    _ns1__getAnalysesRequest*           ns1__getAnalysesRequest,	///< Request parameter
    _ns1__getAnalysesResponse*          ns1__getAnalysesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__defineModelData                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__defineModelData" of service binding "enrimaSoap11"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__defineModelData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__defineModelDataRequest*       ns1__defineModelDataRequest,
    // response parameters:
    _ns1__defineModelDataResponse*      ns1__defineModelDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__defineModelData(
    struct soap *soap,
    // request parameters:
    _ns1__defineModelDataRequest*       ns1__defineModelDataRequest,
    // response parameters:
    _ns1__defineModelDataResponse*      ns1__defineModelDataResponse
  );
@endcode

C++ proxy class (defined in soapenrimaSoap11Proxy.h):
@code
  class enrimaSoap11Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapenrimaSoap11Service.h):
@code
  class enrimaSoap11Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	defineModelData document
//gsoap ns1  service method-encoding:	defineModelData literal
//gsoap ns1  service method-action:	defineModelData ""
int __ns1__defineModelData(
    _ns1__defineModelDataRequest*       ns1__defineModelDataRequest,	///< Request parameter
    _ns1__defineModelDataResponse*      ns1__defineModelDataResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__runScenario                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__runScenario" of service binding "enrimaSoap11"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__runScenario(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__runScenarioRequest*           ns1__runScenarioRequest,
    // response parameters:
    _ns1__runScenarioResponse*          ns1__runScenarioResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__runScenario(
    struct soap *soap,
    // request parameters:
    _ns1__runScenarioRequest*           ns1__runScenarioRequest,
    // response parameters:
    _ns1__runScenarioResponse*          ns1__runScenarioResponse
  );
@endcode

C++ proxy class (defined in soapenrimaSoap11Proxy.h):
@code
  class enrimaSoap11Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapenrimaSoap11Service.h):
@code
  class enrimaSoap11Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	runScenario document
//gsoap ns1  service method-encoding:	runScenario literal
//gsoap ns1  service method-action:	runScenario ""
int __ns1__runScenario(
    _ns1__runScenarioRequest*           ns1__runScenarioRequest,	///< Request parameter
    _ns1__runScenarioResponse*          ns1__runScenarioResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__defineAnalysis                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__defineAnalysis" of service binding "enrimaSoap11"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__defineAnalysis(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__defineAnalysisRequest*        ns1__defineAnalysisRequest,
    // response parameters:
    _ns1__defineAnalysisResponse*       ns1__defineAnalysisResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__defineAnalysis(
    struct soap *soap,
    // request parameters:
    _ns1__defineAnalysisRequest*        ns1__defineAnalysisRequest,
    // response parameters:
    _ns1__defineAnalysisResponse*       ns1__defineAnalysisResponse
  );
@endcode

C++ proxy class (defined in soapenrimaSoap11Proxy.h):
@code
  class enrimaSoap11Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapenrimaSoap11Service.h):
@code
  class enrimaSoap11Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	defineAnalysis document
//gsoap ns1  service method-encoding:	defineAnalysis literal
//gsoap ns1  service method-action:	defineAnalysis ""
int __ns1__defineAnalysis(
    _ns1__defineAnalysisRequest*        ns1__defineAnalysisRequest,	///< Request parameter
    _ns1__defineAnalysisResponse*       ns1__defineAnalysisResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getPreference                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getPreference" of service binding "enrimaSoap11"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getPreference(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__getPreferenceRequest*         ns1__getPreferenceRequest,
    // response parameters:
    _ns1__getPreferenceResponse*        ns1__getPreferenceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getPreference(
    struct soap *soap,
    // request parameters:
    _ns1__getPreferenceRequest*         ns1__getPreferenceRequest,
    // response parameters:
    _ns1__getPreferenceResponse*        ns1__getPreferenceResponse
  );
@endcode

C++ proxy class (defined in soapenrimaSoap11Proxy.h):
@code
  class enrimaSoap11Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapenrimaSoap11Service.h):
@code
  class enrimaSoap11Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getPreference document
//gsoap ns1  service method-encoding:	getPreference literal
//gsoap ns1  service method-action:	getPreference ""
int __ns1__getPreference(
    _ns1__getPreferenceRequest*         ns1__getPreferenceRequest,	///< Request parameter
    _ns1__getPreferenceResponse*        ns1__getPreferenceResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getEntityValues                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getEntityValues" of service binding "enrimaSoap11"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getEntityValues(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__getEntityValuesRequest*       ns1__getEntityValuesRequest,
    // response parameters:
    _ns1__getEntityValuesResponse*      ns1__getEntityValuesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getEntityValues(
    struct soap *soap,
    // request parameters:
    _ns1__getEntityValuesRequest*       ns1__getEntityValuesRequest,
    // response parameters:
    _ns1__getEntityValuesResponse*      ns1__getEntityValuesResponse
  );
@endcode

C++ proxy class (defined in soapenrimaSoap11Proxy.h):
@code
  class enrimaSoap11Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapenrimaSoap11Service.h):
@code
  class enrimaSoap11Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getEntityValues document
//gsoap ns1  service method-encoding:	getEntityValues literal
//gsoap ns1  service method-action:	getEntityValues ""
int __ns1__getEntityValues(
    _ns1__getEntityValuesRequest*       ns1__getEntityValuesRequest,	///< Request parameter
    _ns1__getEntityValuesResponse*      ns1__getEntityValuesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__storeMainSet                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__storeMainSet" of service binding "enrimaSoap11"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__storeMainSet(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__storeMainSetRequest*          ns1__storeMainSetRequest,
    // response parameters:
    _ns1__storeMainSetResponse*         ns1__storeMainSetResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__storeMainSet(
    struct soap *soap,
    // request parameters:
    _ns1__storeMainSetRequest*          ns1__storeMainSetRequest,
    // response parameters:
    _ns1__storeMainSetResponse*         ns1__storeMainSetResponse
  );
@endcode

C++ proxy class (defined in soapenrimaSoap11Proxy.h):
@code
  class enrimaSoap11Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapenrimaSoap11Service.h):
@code
  class enrimaSoap11Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	storeMainSet document
//gsoap ns1  service method-encoding:	storeMainSet literal
//gsoap ns1  service method-action:	storeMainSet ""
int __ns1__storeMainSet(
    _ns1__storeMainSetRequest*          ns1__storeMainSetRequest,	///< Request parameter
    _ns1__storeMainSetResponse*         ns1__storeMainSetResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getSMS                                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getSMS" of service binding "enrimaSoap11"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getSMS(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__getSMSRequest*                ns1__getSMSRequest,
    // response parameters:
    _ns1__getSMSResponse*               ns1__getSMSResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getSMS(
    struct soap *soap,
    // request parameters:
    _ns1__getSMSRequest*                ns1__getSMSRequest,
    // response parameters:
    _ns1__getSMSResponse*               ns1__getSMSResponse
  );
@endcode

C++ proxy class (defined in soapenrimaSoap11Proxy.h):
@code
  class enrimaSoap11Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapenrimaSoap11Service.h):
@code
  class enrimaSoap11Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getSMS document
//gsoap ns1  service method-encoding:	getSMS literal
//gsoap ns1  service method-action:	getSMS ""
int __ns1__getSMS(
    _ns1__getSMSRequest*                ns1__getSMSRequest,	///< Request parameter
    _ns1__getSMSResponse*               ns1__getSMSResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getSolution                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getSolution" of service binding "enrimaSoap11"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getSolution(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__getSolutionRequest*           ns1__getSolutionRequest,
    // response parameters:
    _ns1__getSolutionResponse*          ns1__getSolutionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getSolution(
    struct soap *soap,
    // request parameters:
    _ns1__getSolutionRequest*           ns1__getSolutionRequest,
    // response parameters:
    _ns1__getSolutionResponse*          ns1__getSolutionResponse
  );
@endcode

C++ proxy class (defined in soapenrimaSoap11Proxy.h):
@code
  class enrimaSoap11Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapenrimaSoap11Service.h):
@code
  class enrimaSoap11Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getSolution document
//gsoap ns1  service method-encoding:	getSolution literal
//gsoap ns1  service method-action:	getSolution ""
int __ns1__getSolution(
    _ns1__getSolutionRequest*           ns1__getSolutionRequest,	///< Request parameter
    _ns1__getSolutionResponse*          ns1__getSolutionResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getBatchValues                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getBatchValues" of service binding "enrimaSoap11"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getBatchValues(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__getBatchValuesRequest*        ns1__getBatchValuesRequest,
    // response parameters:
    _ns1__getBatchValuesResponse*       ns1__getBatchValuesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getBatchValues(
    struct soap *soap,
    // request parameters:
    _ns1__getBatchValuesRequest*        ns1__getBatchValuesRequest,
    // response parameters:
    _ns1__getBatchValuesResponse*       ns1__getBatchValuesResponse
  );
@endcode

C++ proxy class (defined in soapenrimaSoap11Proxy.h):
@code
  class enrimaSoap11Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapenrimaSoap11Service.h):
@code
  class enrimaSoap11Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getBatchValues document
//gsoap ns1  service method-encoding:	getBatchValues literal
//gsoap ns1  service method-action:	getBatchValues ""
int __ns1__getBatchValues(
    _ns1__getBatchValuesRequest*        ns1__getBatchValuesRequest,	///< Request parameter
    _ns1__getBatchValuesResponse*       ns1__getBatchValuesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__removeEntityValues                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__removeEntityValues" of service binding "enrimaSoap11"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__removeEntityValues(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__removeEntityValuesRequest*    ns1__removeEntityValuesRequest,
    // response parameters:
    _ns1__removeEntityValuesResponse*   ns1__removeEntityValuesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__removeEntityValues(
    struct soap *soap,
    // request parameters:
    _ns1__removeEntityValuesRequest*    ns1__removeEntityValuesRequest,
    // response parameters:
    _ns1__removeEntityValuesResponse*   ns1__removeEntityValuesResponse
  );
@endcode

C++ proxy class (defined in soapenrimaSoap11Proxy.h):
@code
  class enrimaSoap11Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapenrimaSoap11Service.h):
@code
  class enrimaSoap11Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	removeEntityValues document
//gsoap ns1  service method-encoding:	removeEntityValues literal
//gsoap ns1  service method-action:	removeEntityValues ""
int __ns1__removeEntityValues(
    _ns1__removeEntityValuesRequest*    ns1__removeEntityValuesRequest,	///< Request parameter
    _ns1__removeEntityValuesResponse*   ns1__removeEntityValuesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getDataSummary                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getDataSummary" of service binding "enrimaSoap11"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getDataSummary(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__getDataSummaryRequest*        ns1__getDataSummaryRequest,
    // response parameters:
    _ns1__getDataSummaryResponse*       ns1__getDataSummaryResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getDataSummary(
    struct soap *soap,
    // request parameters:
    _ns1__getDataSummaryRequest*        ns1__getDataSummaryRequest,
    // response parameters:
    _ns1__getDataSummaryResponse*       ns1__getDataSummaryResponse
  );
@endcode

C++ proxy class (defined in soapenrimaSoap11Proxy.h):
@code
  class enrimaSoap11Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapenrimaSoap11Service.h):
@code
  class enrimaSoap11Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getDataSummary document
//gsoap ns1  service method-encoding:	getDataSummary literal
//gsoap ns1  service method-action:	getDataSummary ""
int __ns1__getDataSummary(
    _ns1__getDataSummaryRequest*        ns1__getDataSummaryRequest,	///< Request parameter
    _ns1__getDataSummaryResponse*       ns1__getDataSummaryResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__storeSolution                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__storeSolution" of service binding "enrimaSoap11"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__storeSolution(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__storeSolutionRequest*         ns1__storeSolutionRequest,
    // response parameters:
    _ns1__storeSolutionResponse*        ns1__storeSolutionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__storeSolution(
    struct soap *soap,
    // request parameters:
    _ns1__storeSolutionRequest*         ns1__storeSolutionRequest,
    // response parameters:
    _ns1__storeSolutionResponse*        ns1__storeSolutionResponse
  );
@endcode

C++ proxy class (defined in soapenrimaSoap11Proxy.h):
@code
  class enrimaSoap11Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapenrimaSoap11Service.h):
@code
  class enrimaSoap11Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	storeSolution document
//gsoap ns1  service method-encoding:	storeSolution literal
//gsoap ns1  service method-action:	storeSolution ""
int __ns1__storeSolution(
    _ns1__storeSolutionRequest*         ns1__storeSolutionRequest,	///< Request parameter
    _ns1__storeSolutionResponse*        ns1__storeSolutionResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getSetMembers                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getSetMembers" of service binding "enrimaSoap11"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getSetMembers(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__getSetMembersRequest*         ns1__getSetMembersRequest,
    // response parameters:
    _ns1__getSetMembersResponse*        ns1__getSetMembersResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getSetMembers(
    struct soap *soap,
    // request parameters:
    _ns1__getSetMembersRequest*         ns1__getSetMembersRequest,
    // response parameters:
    _ns1__getSetMembersResponse*        ns1__getSetMembersResponse
  );
@endcode

C++ proxy class (defined in soapenrimaSoap11Proxy.h):
@code
  class enrimaSoap11Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapenrimaSoap11Service.h):
@code
  class enrimaSoap11Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getSetMembers document
//gsoap ns1  service method-encoding:	getSetMembers literal
//gsoap ns1  service method-action:	getSetMembers ""
int __ns1__getSetMembers(
    _ns1__getSetMembersRequest*         ns1__getSetMembersRequest,	///< Request parameter
    _ns1__getSetMembersResponse*        ns1__getSetMembersResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__definePreference                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__definePreference" of service binding "enrimaSoap11"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__definePreference(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__definePreferenceRequest*      ns1__definePreferenceRequest,
    // response parameters:
    _ns1__definePreferenceResponse*     ns1__definePreferenceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__definePreference(
    struct soap *soap,
    // request parameters:
    _ns1__definePreferenceRequest*      ns1__definePreferenceRequest,
    // response parameters:
    _ns1__definePreferenceResponse*     ns1__definePreferenceResponse
  );
@endcode

C++ proxy class (defined in soapenrimaSoap11Proxy.h):
@code
  class enrimaSoap11Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapenrimaSoap11Service.h):
@code
  class enrimaSoap11Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	definePreference document
//gsoap ns1  service method-encoding:	definePreference literal
//gsoap ns1  service method-action:	definePreference ""
int __ns1__definePreference(
    _ns1__definePreferenceRequest*      ns1__definePreferenceRequest,	///< Request parameter
    _ns1__definePreferenceResponse*     ns1__definePreferenceResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__storeSetMembers                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__storeSetMembers" of service binding "enrimaSoap11"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__storeSetMembers(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__storeSetMembersRequest*       ns1__storeSetMembersRequest,
    // response parameters:
    _ns1__storeSetMembersResponse*      ns1__storeSetMembersResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__storeSetMembers(
    struct soap *soap,
    // request parameters:
    _ns1__storeSetMembersRequest*       ns1__storeSetMembersRequest,
    // response parameters:
    _ns1__storeSetMembersResponse*      ns1__storeSetMembersResponse
  );
@endcode

C++ proxy class (defined in soapenrimaSoap11Proxy.h):
@code
  class enrimaSoap11Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapenrimaSoap11Service.h):
@code
  class enrimaSoap11Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	storeSetMembers document
//gsoap ns1  service method-encoding:	storeSetMembers literal
//gsoap ns1  service method-action:	storeSetMembers ""
int __ns1__storeSetMembers(
    _ns1__storeSetMembersRequest*       ns1__storeSetMembersRequest,	///< Request parameter
    _ns1__storeSetMembersResponse*      ns1__storeSetMembersResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__runSolver                                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__runSolver" of service binding "enrimaSoap11"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__runSolver(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__runSolverRequest*             ns1__runSolverRequest,
    // response parameters:
    _ns1__runSolverResponse*            ns1__runSolverResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__runSolver(
    struct soap *soap,
    // request parameters:
    _ns1__runSolverRequest*             ns1__runSolverRequest,
    // response parameters:
    _ns1__runSolverResponse*            ns1__runSolverResponse
  );
@endcode

C++ proxy class (defined in soapenrimaSoap11Proxy.h):
@code
  class enrimaSoap11Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapenrimaSoap11Service.h):
@code
  class enrimaSoap11Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	runSolver document
//gsoap ns1  service method-encoding:	runSolver literal
//gsoap ns1  service method-action:	runSolver ""
int __ns1__runSolver(
    _ns1__runSolverRequest*             ns1__runSolverRequest,	///< Request parameter
    _ns1__runSolverResponse*            ns1__runSolverResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__defineInstance                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__defineInstance" of service binding "enrimaSoap11"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__defineInstance(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__defineInstanceRequest*        ns1__defineInstanceRequest,
    // response parameters:
    _ns1__defineInstanceResponse*       ns1__defineInstanceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__defineInstance(
    struct soap *soap,
    // request parameters:
    _ns1__defineInstanceRequest*        ns1__defineInstanceRequest,
    // response parameters:
    _ns1__defineInstanceResponse*       ns1__defineInstanceResponse
  );
@endcode

C++ proxy class (defined in soapenrimaSoap11Proxy.h):
@code
  class enrimaSoap11Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapenrimaSoap11Service.h):
@code
  class enrimaSoap11Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	defineInstance document
//gsoap ns1  service method-encoding:	defineInstance literal
//gsoap ns1  service method-action:	defineInstance ""
int __ns1__defineInstance(
    _ns1__defineInstanceRequest*        ns1__defineInstanceRequest,	///< Request parameter
    _ns1__defineInstanceResponse*       ns1__defineInstanceResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__removeSetMembers                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__removeSetMembers" of service binding "enrimaSoap11"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__removeSetMembers(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__removeSetMembersRequest*      ns1__removeSetMembersRequest,
    // response parameters:
    _ns1__removeSetMembersResponse*     ns1__removeSetMembersResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__removeSetMembers(
    struct soap *soap,
    // request parameters:
    _ns1__removeSetMembersRequest*      ns1__removeSetMembersRequest,
    // response parameters:
    _ns1__removeSetMembersResponse*     ns1__removeSetMembersResponse
  );
@endcode

C++ proxy class (defined in soapenrimaSoap11Proxy.h):
@code
  class enrimaSoap11Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapenrimaSoap11Service.h):
@code
  class enrimaSoap11Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	removeSetMembers document
//gsoap ns1  service method-encoding:	removeSetMembers literal
//gsoap ns1  service method-action:	removeSetMembers ""
int __ns1__removeSetMembers(
    _ns1__removeSetMembersRequest*      ns1__removeSetMembersRequest,	///< Request parameter
    _ns1__removeSetMembersResponse*     ns1__removeSetMembersResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__storeEntityValues                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__storeEntityValues" of service binding "enrimaSoap11"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__storeEntityValues(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__storeEntityValuesRequest*     ns1__storeEntityValuesRequest,
    // response parameters:
    _ns1__storeEntityValuesResponse*    ns1__storeEntityValuesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__storeEntityValues(
    struct soap *soap,
    // request parameters:
    _ns1__storeEntityValuesRequest*     ns1__storeEntityValuesRequest,
    // response parameters:
    _ns1__storeEntityValuesResponse*    ns1__storeEntityValuesResponse
  );
@endcode

C++ proxy class (defined in soapenrimaSoap11Proxy.h):
@code
  class enrimaSoap11Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapenrimaSoap11Service.h):
@code
  class enrimaSoap11Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	storeEntityValues document
//gsoap ns1  service method-encoding:	storeEntityValues literal
//gsoap ns1  service method-action:	storeEntityValues ""
int __ns1__storeEntityValues(
    _ns1__storeEntityValuesRequest*     ns1__storeEntityValuesRequest,	///< Request parameter
    _ns1__storeEntityValuesResponse*    ns1__storeEntityValuesResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getSolverStatus                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getSolverStatus" of service binding "enrimaSoap11"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getSolverStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__getSolverStatusRequest*       ns1__getSolverStatusRequest,
    // response parameters:
    _ns1__getSolverStatusResponse*      ns1__getSolverStatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getSolverStatus(
    struct soap *soap,
    // request parameters:
    _ns1__getSolverStatusRequest*       ns1__getSolverStatusRequest,
    // response parameters:
    _ns1__getSolverStatusResponse*      ns1__getSolverStatusResponse
  );
@endcode

C++ proxy class (defined in soapenrimaSoap11Proxy.h):
@code
  class enrimaSoap11Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapenrimaSoap11Service.h):
@code
  class enrimaSoap11Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getSolverStatus document
//gsoap ns1  service method-encoding:	getSolverStatus literal
//gsoap ns1  service method-action:	getSolverStatus ""
int __ns1__getSolverStatus(
    _ns1__getSolverStatusRequest*       ns1__getSolverStatusRequest,	///< Request parameter
    _ns1__getSolverStatusResponse*      ns1__getSolverStatusResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

XML content can be retrieved from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

XML content can be stored to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback


@section ns2 Top-level root elements of schema "http://www.ime.iiasa.ac.at/model/spec"

@section ns3 Top-level root elements of schema "http://www.ime.iiasa.ac.at/model/instance"

  - <ns3:dataSet> @ref _ns3__dataSet
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__dataSet(struct soap*, _ns3__dataSet*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__dataSet(struct soap*, _ns3__dataSet*);
    @endcode

@section ns4 Top-level root elements of schema "http://www.ime.iiasa.ac.at/model/analysis"

@section ns1 Top-level root elements of schema "http://www.ime.iiasa.ac.at/enrima"

  - <ns1:getSMSRequest> @ref _ns1__getSMSRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getSMSRequest(struct soap*, _ns1__getSMSRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getSMSRequest(struct soap*, _ns1__getSMSRequest*);
    @endcode

  - <ns1:getSMSResponse> @ref _ns1__getSMSResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getSMSResponse(struct soap*, _ns1__getSMSResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getSMSResponse(struct soap*, _ns1__getSMSResponse*);
    @endcode

  - <ns1:getEntityValuesRequest> @ref _ns1__getEntityValuesRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getEntityValuesRequest(struct soap*, _ns1__getEntityValuesRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getEntityValuesRequest(struct soap*, _ns1__getEntityValuesRequest*);
    @endcode

  - <ns1:getEntityValuesResponse> @ref _ns1__getEntityValuesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getEntityValuesResponse(struct soap*, _ns1__getEntityValuesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getEntityValuesResponse(struct soap*, _ns1__getEntityValuesResponse*);
    @endcode

  - <ns1:getBatchValuesRequest> @ref _ns1__getBatchValuesRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getBatchValuesRequest(struct soap*, _ns1__getBatchValuesRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getBatchValuesRequest(struct soap*, _ns1__getBatchValuesRequest*);
    @endcode

  - <ns1:getBatchValuesResponse> @ref _ns1__getBatchValuesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getBatchValuesResponse(struct soap*, _ns1__getBatchValuesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getBatchValuesResponse(struct soap*, _ns1__getBatchValuesResponse*);
    @endcode

  - <ns1:getSetMembersRequest> @ref _ns1__getSetMembersRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getSetMembersRequest(struct soap*, _ns1__getSetMembersRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getSetMembersRequest(struct soap*, _ns1__getSetMembersRequest*);
    @endcode

  - <ns1:getSetMembersResponse> @ref _ns1__getSetMembersResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getSetMembersResponse(struct soap*, _ns1__getSetMembersResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getSetMembersResponse(struct soap*, _ns1__getSetMembersResponse*);
    @endcode

  - <ns1:storeMainSetRequest> @ref _ns1__storeMainSetRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__storeMainSetRequest(struct soap*, _ns1__storeMainSetRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__storeMainSetRequest(struct soap*, _ns1__storeMainSetRequest*);
    @endcode

  - <ns1:storeMainSetResponse> @ref _ns1__storeMainSetResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__storeMainSetResponse(struct soap*, _ns1__storeMainSetResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__storeMainSetResponse(struct soap*, _ns1__storeMainSetResponse*);
    @endcode

  - <ns1:storeSetMembersRequest> @ref _ns1__storeSetMembersRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__storeSetMembersRequest(struct soap*, _ns1__storeSetMembersRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__storeSetMembersRequest(struct soap*, _ns1__storeSetMembersRequest*);
    @endcode

  - <ns1:storeSetMembersResponse> @ref _ns1__storeSetMembersResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__storeSetMembersResponse(struct soap*, _ns1__storeSetMembersResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__storeSetMembersResponse(struct soap*, _ns1__storeSetMembersResponse*);
    @endcode

  - <ns1:removeSetMembersRequest> @ref _ns1__removeSetMembersRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__removeSetMembersRequest(struct soap*, _ns1__removeSetMembersRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__removeSetMembersRequest(struct soap*, _ns1__removeSetMembersRequest*);
    @endcode

  - <ns1:removeSetMembersResponse> @ref _ns1__removeSetMembersResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__removeSetMembersResponse(struct soap*, _ns1__removeSetMembersResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__removeSetMembersResponse(struct soap*, _ns1__removeSetMembersResponse*);
    @endcode

  - <ns1:storeEntityValuesRequest> @ref _ns1__storeEntityValuesRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__storeEntityValuesRequest(struct soap*, _ns1__storeEntityValuesRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__storeEntityValuesRequest(struct soap*, _ns1__storeEntityValuesRequest*);
    @endcode

  - <ns1:storeEntityValuesResponse> @ref _ns1__storeEntityValuesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__storeEntityValuesResponse(struct soap*, _ns1__storeEntityValuesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__storeEntityValuesResponse(struct soap*, _ns1__storeEntityValuesResponse*);
    @endcode

  - <ns1:removeEntityValuesRequest> @ref _ns1__removeEntityValuesRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__removeEntityValuesRequest(struct soap*, _ns1__removeEntityValuesRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__removeEntityValuesRequest(struct soap*, _ns1__removeEntityValuesRequest*);
    @endcode

  - <ns1:removeEntityValuesResponse> @ref _ns1__removeEntityValuesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__removeEntityValuesResponse(struct soap*, _ns1__removeEntityValuesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__removeEntityValuesResponse(struct soap*, _ns1__removeEntityValuesResponse*);
    @endcode

  - <ns1:defineModelDataRequest> @ref _ns1__defineModelDataRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__defineModelDataRequest(struct soap*, _ns1__defineModelDataRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__defineModelDataRequest(struct soap*, _ns1__defineModelDataRequest*);
    @endcode

  - <ns1:defineModelDataResponse> @ref _ns1__defineModelDataResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__defineModelDataResponse(struct soap*, _ns1__defineModelDataResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__defineModelDataResponse(struct soap*, _ns1__defineModelDataResponse*);
    @endcode

  - <ns1:changeModelDataStatusRequest> @ref _ns1__changeModelDataStatusRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__changeModelDataStatusRequest(struct soap*, _ns1__changeModelDataStatusRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__changeModelDataStatusRequest(struct soap*, _ns1__changeModelDataStatusRequest*);
    @endcode

  - <ns1:changeModelDataStatusResponse> @ref _ns1__changeModelDataStatusResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__changeModelDataStatusResponse(struct soap*, _ns1__changeModelDataStatusResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__changeModelDataStatusResponse(struct soap*, _ns1__changeModelDataStatusResponse*);
    @endcode

  - <ns1:defineInstanceRequest> @ref _ns1__defineInstanceRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__defineInstanceRequest(struct soap*, _ns1__defineInstanceRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__defineInstanceRequest(struct soap*, _ns1__defineInstanceRequest*);
    @endcode

  - <ns1:defineInstanceResponse> @ref _ns1__defineInstanceResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__defineInstanceResponse(struct soap*, _ns1__defineInstanceResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__defineInstanceResponse(struct soap*, _ns1__defineInstanceResponse*);
    @endcode

  - <ns1:getDataSummaryRequest> @ref _ns1__getDataSummaryRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getDataSummaryRequest(struct soap*, _ns1__getDataSummaryRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getDataSummaryRequest(struct soap*, _ns1__getDataSummaryRequest*);
    @endcode

  - <ns1:getDataSummaryResponse> @ref _ns1__getDataSummaryResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getDataSummaryResponse(struct soap*, _ns1__getDataSummaryResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getDataSummaryResponse(struct soap*, _ns1__getDataSummaryResponse*);
    @endcode

  - <ns1:defineAnalysisRequest> @ref _ns1__defineAnalysisRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__defineAnalysisRequest(struct soap*, _ns1__defineAnalysisRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__defineAnalysisRequest(struct soap*, _ns1__defineAnalysisRequest*);
    @endcode

  - <ns1:defineAnalysisResponse> @ref _ns1__defineAnalysisResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__defineAnalysisResponse(struct soap*, _ns1__defineAnalysisResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__defineAnalysisResponse(struct soap*, _ns1__defineAnalysisResponse*);
    @endcode

  - <ns1:getAnalysesRequest> @ref _ns1__getAnalysesRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getAnalysesRequest(struct soap*, _ns1__getAnalysesRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getAnalysesRequest(struct soap*, _ns1__getAnalysesRequest*);
    @endcode

  - <ns1:getAnalysesResponse> @ref _ns1__getAnalysesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getAnalysesResponse(struct soap*, _ns1__getAnalysesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getAnalysesResponse(struct soap*, _ns1__getAnalysesResponse*);
    @endcode

  - <ns1:definePreferenceRequest> @ref _ns1__definePreferenceRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__definePreferenceRequest(struct soap*, _ns1__definePreferenceRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__definePreferenceRequest(struct soap*, _ns1__definePreferenceRequest*);
    @endcode

  - <ns1:definePreferenceResponse> @ref _ns1__definePreferenceResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__definePreferenceResponse(struct soap*, _ns1__definePreferenceResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__definePreferenceResponse(struct soap*, _ns1__definePreferenceResponse*);
    @endcode

  - <ns1:getPreferenceRequest> @ref _ns1__getPreferenceRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getPreferenceRequest(struct soap*, _ns1__getPreferenceRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getPreferenceRequest(struct soap*, _ns1__getPreferenceRequest*);
    @endcode

  - <ns1:getPreferenceResponse> @ref _ns1__getPreferenceResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getPreferenceResponse(struct soap*, _ns1__getPreferenceResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getPreferenceResponse(struct soap*, _ns1__getPreferenceResponse*);
    @endcode

  - <ns1:storeSolutionRequest> @ref _ns1__storeSolutionRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__storeSolutionRequest(struct soap*, _ns1__storeSolutionRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__storeSolutionRequest(struct soap*, _ns1__storeSolutionRequest*);
    @endcode

  - <ns1:storeSolutionResponse> @ref _ns1__storeSolutionResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__storeSolutionResponse(struct soap*, _ns1__storeSolutionResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__storeSolutionResponse(struct soap*, _ns1__storeSolutionResponse*);
    @endcode

  - <ns1:getSolutionRequest> @ref _ns1__getSolutionRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getSolutionRequest(struct soap*, _ns1__getSolutionRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getSolutionRequest(struct soap*, _ns1__getSolutionRequest*);
    @endcode

  - <ns1:getSolutionResponse> @ref _ns1__getSolutionResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getSolutionResponse(struct soap*, _ns1__getSolutionResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getSolutionResponse(struct soap*, _ns1__getSolutionResponse*);
    @endcode

  - <ns1:updateSolverStatusRequest> @ref _ns1__updateSolverStatusRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__updateSolverStatusRequest(struct soap*, _ns1__updateSolverStatusRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__updateSolverStatusRequest(struct soap*, _ns1__updateSolverStatusRequest*);
    @endcode

  - <ns1:updateSolverStatusResponse> @ref _ns1__updateSolverStatusResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__updateSolverStatusResponse(struct soap*, _ns1__updateSolverStatusResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__updateSolverStatusResponse(struct soap*, _ns1__updateSolverStatusResponse*);
    @endcode

  - <ns1:getSolverStatusRequest> @ref _ns1__getSolverStatusRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getSolverStatusRequest(struct soap*, _ns1__getSolverStatusRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getSolverStatusRequest(struct soap*, _ns1__getSolverStatusRequest*);
    @endcode

  - <ns1:getSolverStatusResponse> @ref _ns1__getSolverStatusResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getSolverStatusResponse(struct soap*, _ns1__getSolverStatusResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getSolverStatusResponse(struct soap*, _ns1__getSolverStatusResponse*);
    @endcode

  - <ns1:runSolverRequest> @ref _ns1__runSolverRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__runSolverRequest(struct soap*, _ns1__runSolverRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__runSolverRequest(struct soap*, _ns1__runSolverRequest*);
    @endcode

  - <ns1:runSolverResponse> @ref _ns1__runSolverResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__runSolverResponse(struct soap*, _ns1__runSolverResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__runSolverResponse(struct soap*, _ns1__runSolverResponse*);
    @endcode

  - <ns1:runScenarioRequest> @ref _ns1__runScenarioRequest
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__runScenarioRequest(struct soap*, _ns1__runScenarioRequest*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__runScenarioRequest(struct soap*, _ns1__runScenarioRequest*);
    @endcode

  - <ns1:runScenarioResponse> @ref _ns1__runScenarioResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__runScenarioResponse(struct soap*, _ns1__runScenarioResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__runScenarioResponse(struct soap*, _ns1__runScenarioResponse*);
    @endcode

*/

/* End of enrima.h */
